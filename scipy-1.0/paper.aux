\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\bibstyle{naturemag-doi}
\babel@aux{english}{}
\citation{oliphant2006guide,vanderwalt2011numpy}
\citation{pedregosa2011scikit}
\citation{vanderwalt2014scikit}
\citation{alex_nitz_2018_1596771,LIGO-open}
\citation{PhysRevD.93.122003,abbott2017gw170817}
\citation{2019ApJ875L3E}
\citation{mathworks-globe-97,esri-revenue,bloom-wolfram}
\citation{scipy-ecosystem}
\citation{social-python}
\citation{cpython-refman,cpython-source}
\citation{cpython-refman,cpython-source}
\citation{Hugunin-first}
\citation{Hugunin-whitepaper}
\citation{Travis-Keynote-2010}
\citation{Travis-some-modules,Travis-enhance}
\citation{multipack}
\citation{hindmarsh1983odepack}
\citation{piessens1983quadpack}
\citation{osti_6997568}
\citation{peterson2009f2py}
\citation{Strangman-modules}
\citation{first-scipy-rel}
\citation{first-scipy-rel}
\citation{archived-scipyorg}
\citation{new-scipy-list}
\citation{first-scipy-rel}
\citation{first-scipy-docs}
\citation{first-scipy-workshop}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Excerpt from {\color {blue}\uwave  {the }}SciPy 0.1 release announcement (typos corrected) {\color {blue}\uwave  {posted August 20, 2001, on the ``Python-list'' mailing list\unhbox \voidb@x \hbox {\cite  {first-scipy-rel}}\hspace  {0pt}}}.\relax }}{3}{figure.caption.1}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:announce-0.1}{{1}{3}{Excerpt from \DIFaddbeginFL \DIFaddFL {the }\DIFaddendFL SciPy 0.1 release announcement (typos corrected) \DIFaddbeginFL \DIFaddFL {posted August 20, 2001, on the ``Python-list'' mailing list\mbox {\cite {first-scipy-rel}}\hspace {0pt}}\DIFaddendFL .\relax }{figure.caption.1}{}}
\citation{Numeric-manual}
\citation{STScI-slither}
\citation{schroeder:2006:VTK}
\citation{mayavi-intro}
\citation{Kluyver:2016aa}
\citation{matlab}
\citation{matplotlib-rel}
\citation{greenfield2003numarray}
\citation{numpy-1.0-tag}
\citation{dubois2007guest}
\citation{oliphant2007python}
\citation{perez2007ipython}
\citation{hunter2007matplotlib}
\citation{myers2007python}
\citation{greenfield2007reaching}
\citation{krauss2007python}
\citation{bienstman2007python}
\citation{mardal2007using}
\citation{millman2007analysis}
\citation{shi2007python}
\citation{backer2007computational,myers2007pythona}
\citation{dubois2007guest}
\citation{scikits-general}
\citation{millman2014developing}
\citation{oliphant2006guide}
\citation{sphinx}
\citation{pydocweb}
\citation{vanderwalt2008scipy,harrington2008scipy}
\citation{harrington2009scipy}
\citation{siamcse09}
\citation{dubois2007guest}
\citation{millman2011python}
\citation{perez2011python}
\citation{vanderwalt2011numpy}
\citation{behnel2011cython}
\citation{ramachandran2011mayavi}
\citation{python-FIN}
\citation{numfocus}
\citation{dependents}
\citation{boisvert1991guide}
\citation{statsmodels2010}
\citation{pedregosa2011scikit}
\citation{10.7717/peerj-cs.55}
\citation{2013PASP-emcee}
\citation{pystan-ref}
\citation{vanderwalt2014scikit}
\citation{meurer2017sympy}
\citation{hagberg2008networkx}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Major milestones from SciPy's initial release in 2001 to the release of SciPy 1.0 in 2017. {\color {blue}\uwave  {Note that SciKits and GitHub have been introduced in the ``Background'' section; more information about Cython and SciPy subpackages (e.g. }}\texttt  {{\color {blue}\uwave  {scipy.sparse}}}{\color {blue}\uwave  {) is available in ``Architecture and implementation choices'', BLAS/LAPACK support is detailed in ``Key technical improvements'', and continuous integration is discussed in ``Test and benchmark suite''.}}\relax }}{5}{figure.caption.2}}
\newlabel{fig:timeline}{{2}{5}{Major milestones from SciPy's initial release in 2001 to the release of SciPy 1.0 in 2017. \DIFaddbeginFL \DIFaddFL {Note that SciKits and GitHub have been introduced in the ``Background'' section; more information about Cython and SciPy subpackages (e.g. }\texttt {\DIFaddFL {scipy.sparse}}\DIFaddFL {) is available in ``Architecture and implementation choices'', BLAS/LAPACK support is detailed in ``Key technical improvements'', and continuous integration is discussed in ``Test and benchmark suite''.}\DIFaddendFL \relax }{figure.caption.2}{}}
\citation{SciPy_tutorials}
\citation{SciPy_API}
\citation{CODATA2014}
\citation{Dierckx:1993:CSF:151103}
\citation{matlab}
\citation{boisvert1997matrix}
\citation{rew1990netcdf}
\citation{harwellboeing}
\citation{ODRPACK_Boggs}
\citation{linguistref}
\citation{Koelbel:1993:HPF:562354}
\citation{SWARZTRAUBER198445,SWARZTRAUBER198251}
\citation{hindmarsh1983odepack}
\citation{piessens1983quadpack}
\citation{piessens1983quadpack}
\citation{hindmarsh1983odepack}
\citation{Dierckx:1993:CSF:151103}
\citation{ODRPACK_Boggs}
\citation{osti_6997568}
\citation{leh:sor:yan96}
\citation{osti_6997568}
\citation{SWARZTRAUBER198445,SWARZTRAUBER198251}
\citation{leh:sor:yan96}
\citation{Amos:1986:APP:7921.214331}
\citation{CDFLIB_site}
\citation{Kernighan:1988:CPL:576122}
\citation{doi:10.1080/10556788.2018.1449842}
\citation{li05,superlu_ug99}
\citation{Barber:1996:QAC:235815.235821}
\citation{cephes_netlib}
\citation{behnel2011cython}
\citation{Lam:2015:NLP:2833157.2833162}
\citation{Bolz:2009:TMP:1565824.1565827}
\citation{superlu_ug99}
\citation{knn-jake}
\citation{kdtree-search-algo}
\citation{gh-4374}
\citation{10.1007/978-3-540-75755-9_107}
\citation{Cormen:2001:IA:580470}
\citation{Moore2000ar}
\citation{ckdtree-weights}
\citation{0004-637X-750-1-38}
\newlabel{sec:technical_improvements}{{}{8}{}{figure.caption.2}{}}
\citation{LAPACK}
\citation{behnel2011cython}
\citation{blas-lapack-wrappers-scipy-2015}
\citation{peterson2009f2py}
\citation{andersen2000mosek}
\citation{netlib}
\citation{andersen1995presolving}
\citation{Wormington1999,Storn1997}
\citation{nelder_simplex_1965,wright_direct_1996}
\citation{nelder_simplex_1965,wright_direct_1996}
\citation{powell_efficient_1964}
\citation{powell_efficient_1964}
\citation{powell_direct_1994,powell_direct_1998,powell_view_2007}
\citation{powell_direct_1994,powell_direct_1998,powell_view_2007}
\citation{polak_note_1969,nocedal_numerical_2006}
\citation{polak_note_1969,nocedal_numerical_2006}
\citation{nocedal_numerical_2006}
\citation{nocedal_numerical_2006}
\citation{byrd_limited_1995,zhu_algorithm_1997}
\citation{byrd_limited_1995,zhu_algorithm_1997}
\citation{schittkowski_nonlinear_1982,schittkowski_nonlinear_1982-1,schittkowski_convergence_1983,kraft_software_1988}
\citation{schittkowski_nonlinear_1982,schittkowski_nonlinear_1982-1,schittkowski_convergence_1983,kraft_software_1988}
\citation{nash_newton-type_1984}
\citation{nash_newton-type_1984}
\citation{nocedal_numerical_2006}
\citation{nocedal_numerical_2006}
\citation{powell_new_1970,nocedal_numerical_2006}
\citation{powell_new_1970,nocedal_numerical_2006}
\citation{steihaug_conjugate_1983,nocedal_numerical_2006}
\citation{steihaug_conjugate_1983,nocedal_numerical_2006}
\citation{conn_trust_2000,more_computing_1983}
\citation{conn_trust_2000,more_computing_1983}
\citation{gould_solving_1999,doi:10.1080/10556788.2018.1449842}
\citation{gould_solving_1999,doi:10.1080/10556788.2018.1449842}
\@writefile{toc}{\contentsline {paragraph}{Local Minimization}{10}{figure.caption.2}}
\@writefile{toc}{\contentsline {paragraph}{Global Minimization}{10}{figure.caption.2}}
\citation{Griffiths5228}
\citation{Dierckx:1993:CSF:151103,FITPACK}
\citation{scipy-gh2885}
\citation{scipy-gh3174}
\citation{deBoor1978}
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces Optimization methods from \texttt  {minimize}, which solves problems of the form $\qopname  \relax m{min}_x f(x)$, where $x \in \mathbb  {R}^n$ and $f: \mathbb  {R}^n \rightarrow \mathbb  {R}$ . The field \textit  {version added} specifies the algorithm's first appearance in SciPy. Algorithms with \textit  {version added} ``0.6*'' were added in version 0.6 or before. The field \textit  {wrapper} indicates whether the implementation available in SciPy wraps a function written in a compiled language (e.g. C or FORTRAN). The fields \textit  {1\relax \textsuperscript  {st}} and \textit  {2\relax \textsuperscript  {nd} derivatives} indicates whether first or second order derivatives are required. When \textit  {2\relax \textsuperscript  {nd} derivatives} is flagged with $\sim $ the algorithm does not require second-order derivatives from the user; it computes an approximation internally and uses it to accelerate method convergence. \textit  {Iterative Hessian factorization} denotes algorithms that factorize the Hessian in an iterative way, which does not require explicit matrix factorization or storage of the Hessian. \textit  {Local convergence} gives a lower bound on the rate of convergence of the iterations sequence once the iterate is sufficiently close to the solution: linear (L), superlinear (S) and quadratic (Q). Convergence rates denoted S$^*$ indicate that the algorithm has a superlinear rate for the parameters used in SciPy, but can achieve a quadratic convergence rate with other parameter choices. \textit  {Global convergence} is marked for the algorithms with guarantees of convergence to a stationary point (i.e.\ a point $x^*$ for which $\nabla f(x^*) = 0$); this is \emph  {not} a guarantee of convergence to a global minimum. \textit  {{\color {blue}\uwave  {Lines-search (LS) or trust-region (TR)}}} {\color {blue}\uwave  {indicates which of the two globalization approaches is employed by the algorithm. }}The table also indicates which algorithms can deal with constraints on the variables. We distinguish among \textit  {bound constraints} (i.e.\ $x^l \le x \le x^u$), \textit  {equality constraints} (i.e.\ $c_{\text  {eq}}(x) = 0$) and \textit  {inequality constraints} (i.e.\ $c_{\text  {ineq}}(x) \ge 0$).\relax }}{11}{table.caption.3}}
\newlabel{tab:minimize-si}{{1}{11}{Optimization methods from \texttt {minimize}, which solves problems of the form $\min _x f(x)$, where $x \in \mathbb {R}^n$ and $f: \mathbb {R}^n \rightarrow \mathbb {R}$ . The field \textit {version added} specifies the algorithm's first appearance in SciPy. Algorithms with \textit {version added} ``0.6*'' were added in version 0.6 or before. The field \textit {wrapper} indicates whether the implementation available in SciPy wraps a function written in a compiled language (e.g. C or FORTRAN). The fields \textit {\nth {1}} and \textit {\nth {2} derivatives} indicates whether first or second order derivatives are required. When \textit {\nth {2} derivatives} is flagged with $\sim $ the algorithm does not require second-order derivatives from the user; it computes an approximation internally and uses it to accelerate method convergence. \textit {Iterative Hessian factorization} denotes algorithms that factorize the Hessian in an iterative way, which does not require explicit matrix factorization or storage of the Hessian. \textit {Local convergence} gives a lower bound on the rate of convergence of the iterations sequence once the iterate is sufficiently close to the solution: linear (L), superlinear (S) and quadratic (Q). Convergence rates denoted S$^*$ indicate that the algorithm has a superlinear rate for the parameters used in SciPy, but can achieve a quadratic convergence rate with other parameter choices. \textit {Global convergence} is marked for the algorithms with guarantees of convergence to a stationary point (i.e.\ a point $x^*$ for which $\nabla f(x^*) = 0$); this is \emph {not} a guarantee of convergence to a global minimum. \DIFaddbeginFL \textit {\DIFaddFL {Lines-search (LS) or trust-region (TR)}} \DIFaddFL {indicates which of the two globalization approaches is employed by the algorithm. }\DIFaddendFL The table also indicates which algorithms can deal with constraints on the variables. We distinguish among \textit {bound constraints} (i.e.\ $x^l \le x \le x^u$), \textit {equality constraints} (i.e.\ $c_{\text {eq}}(x) = 0$) and \textit {inequality constraints} (i.e.\ $c_{\text {ineq}}(x) \ge 0$).\relax }{table.caption.3}{}}
\citation{scipy-gh5653}
\citation{FritschCarlson1980,Akima1970}
\citation{TDD-Beck}
\citation{silver2017collaborative}
\citation{pytest}
\citation{pytest-cov}
\citation{gcov}
\citation{Bolz:2009:TMP:1565824.1565827}
\citation{scipy-cov}
\citation{scipy-cov}
\citation{asvref}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces  Python (red) and compiled (blue) code volume in SciPy over time. Deep-shaded area represents lines of code covered by units tests; light-shaded area represents lines not covered. With the exception of the removal of $\approx \num {61000}$ lines of compiled code for SciPy v0.14, the volume of both compiled (C, C++, and Fortran) and Python code has increased between releases, as has the number of lines covered by unit tests. In SciPy v1.0.0, tests covered approximately 45\% of \num {462574}~lines of compiled code (many of which are automatically generated from Cython source), and nearly 87\% of \num {106878}~lines of Python code.  Coverage analysis is performed automatically in our continuous integration suite using the \texttt  {pytest-cov} and \texttt  {gcov} libraries for Python and compiled code, respectively. The reconstitution of historical build and test environments for this figure was performed using a Docker-based approach\cite  {scipy-cov}. \relax }}{12}{figure.caption.4}}
\newlabel{fig:coverage}{{3}{12}{Python (red) and compiled (blue) code volume in SciPy over time. Deep-shaded area represents lines of code covered by units tests; light-shaded area represents lines not covered. With the exception of the removal of $\approx \num {61000}$ lines of compiled code for SciPy v0.14, the volume of both compiled (C, C++, and Fortran) and Python code has increased between releases, as has the number of lines covered by unit tests. In SciPy v1.0.0, tests covered approximately 45\% of \num {462574}~lines of compiled code (many of which are automatically generated from Cython source), and nearly 87\% of \num {106878}~lines of Python code.\\ Coverage analysis is performed automatically in our continuous integration suite using the \texttt {pytest-cov} and \texttt {gcov} libraries for Python and compiled code, respectively. The reconstitution of historical build and test environments for this figure was performed using a Docker-based approach\cite {scipy-cov}. \relax }{figure.caption.4}{}}
\citation{SciPyProjectGovernance}
\citation{scipy-dev-guide}
\citation{eghbal2016}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Results of the \texttt  {scipy.spatial.cKDTree.query} benchmark from the introduction of \texttt  {cKDTree} to the release of SciPy~1.0. The benchmark generates a $k$-d tree from \num {10000} uniformly distributed points in an $m$-dimensional unit hypercube, then finds the nearest (Euclidean) neighbor in the tree for each of \num {1000}~query points. Each marker in the figure indicates the execution time of the benchmark for a commit in the master branch of SciPy. Substantial performance improvements were realized when \texttt  {cKDTree} was fully Cythonized and again when it was rewritten in C++. The tree was generated without application of toroidal topology (\texttt  {boxsize=None}), and tests were performed by Airspeed Velocity 0.4 using Python~2.7, NumPy~1.8.2, and Cython versions 0.27.3, 0.21.1, and 0.18 (for improved backward compatibility).\relax }}{13}{figure.caption.5}}
\newlabel{fig:asvbench}{{4}{13}{Results of the \texttt {scipy.spatial.cKDTree.query} benchmark from the introduction of \texttt {cKDTree} to the release of SciPy~1.0. The benchmark generates a $k$-d tree from \num {10000} uniformly distributed points in an $m$-dimensional unit hypercube, then finds the nearest (Euclidean) neighbor in the tree for each of \num {1000}~query points. Each marker in the figure indicates the execution time of the benchmark for a commit in the master branch of SciPy. Substantial performance improvements were realized when \texttt {cKDTree} was fully Cythonized and again when it was rewritten in C++. The tree was generated without application of toroidal topology (\texttt {boxsize=None}), and tests were performed by Airspeed Velocity 0.4 using Python~2.7, NumPy~1.8.2, and Cython versions 0.27.3, 0.21.1, and 0.18 (for improved backward compatibility).\relax }{figure.caption.5}{}}
\citation{SciPyValue}
\citation{astropy-2018}
\citation{pypinfo}
\citation{condainfo}
\citation{SciPylib}
\citation{googlescholar}
\citation{PhysRevLett.116.061102}
\citation{intel-python}
\citation{octoverse-scipy}
\citation{SciPy_roadmap_1,SciPy_roadmap_dev}
\citation{SciPy_tutorials}
\citation{abbasi2018sparse}
\bibdata{references}
\bibcite{oliphant2006guide}{1}
\bibcite{vanderwalt2011numpy}{2}
\bibcite{pedregosa2011scikit}{3}
\bibcite{vanderwalt2014scikit}{4}
\bibcite{alex_nitz_2018_1596771}{5}
\bibcite{LIGO-open}{6}
\bibcite{PhysRevD.93.122003}{7}
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces Summary of SciPy Roadmap items following 1.0 release\relax }}{15}{table.caption.6}}
\newlabel{table:roadmap}{{2}{15}{Summary of SciPy Roadmap items following 1.0 release\relax }{table.caption.6}{}}
\@writefile{toc}{\contentsline {section}{\hspace  *{-\tocsep }References}{15}{table.caption.6}}
\bibcite{abbott2017gw170817}{8}
\bibcite{2019ApJ875L3E}{9}
\bibcite{mathworks-globe-97}{10}
\bibcite{esri-revenue}{11}
\bibcite{bloom-wolfram}{12}
\bibcite{scipy-ecosystem}{13}
\bibcite{social-python}{14}
\bibcite{cpython-refman}{15}
\bibcite{cpython-source}{16}
\bibcite{Hugunin-first}{17}
\bibcite{Hugunin-whitepaper}{18}
\bibcite{Travis-Keynote-2010}{19}
\bibcite{Travis-some-modules}{20}
\bibcite{Travis-enhance}{21}
\bibcite{multipack}{22}
\bibcite{hindmarsh1983odepack}{23}
\bibcite{piessens1983quadpack}{24}
\bibcite{osti_6997568}{25}
\bibcite{peterson2009f2py}{26}
\bibcite{Strangman-modules}{27}
\bibcite{first-scipy-rel}{28}
\bibcite{archived-scipyorg}{29}
\bibcite{new-scipy-list}{30}
\bibcite{first-scipy-docs}{31}
\bibcite{first-scipy-workshop}{32}
\bibcite{Numeric-manual}{33}
\bibcite{STScI-slither}{34}
\bibcite{schroeder:2006:VTK}{35}
\bibcite{mayavi-intro}{36}
\bibcite{Kluyver:2016aa}{37}
\bibcite{matlab}{38}
\bibcite{matplotlib-rel}{39}
\bibcite{greenfield2003numarray}{40}
\bibcite{numpy-1.0-tag}{41}
\bibcite{dubois2007guest}{42}
\bibcite{oliphant2007python}{43}
\bibcite{perez2007ipython}{44}
\bibcite{hunter2007matplotlib}{45}
\bibcite{myers2007python}{46}
\bibcite{greenfield2007reaching}{47}
\bibcite{krauss2007python}{48}
\bibcite{bienstman2007python}{49}
\bibcite{mardal2007using}{50}
\bibcite{millman2007analysis}{51}
\bibcite{shi2007python}{52}
\bibcite{backer2007computational}{53}
\bibcite{myers2007pythona}{54}
\bibcite{scikits-general}{55}
\bibcite{millman2014developing}{56}
\bibcite{sphinx}{57}
\bibcite{pydocweb}{58}
\bibcite{vanderwalt2008scipy}{59}
\bibcite{harrington2008scipy}{60}
\bibcite{harrington2009scipy}{61}
\bibcite{siamcse09}{62}
\bibcite{millman2011python}{63}
\bibcite{perez2011python}{64}
\bibcite{behnel2011cython}{65}
\bibcite{ramachandran2011mayavi}{66}
\bibcite{python-FIN}{67}
\bibcite{numfocus}{68}
\bibcite{dependents}{69}
\bibcite{boisvert1991guide}{70}
\bibcite{statsmodels2010}{71}
\bibcite{10.7717/peerj-cs.55}{72}
\bibcite{2013PASP-emcee}{73}
\bibcite{pystan-ref}{74}
\bibcite{meurer2017sympy}{75}
\bibcite{hagberg2008networkx}{76}
\bibcite{SciPy_tutorials}{77}
\bibcite{SciPy_API}{78}
\bibcite{CODATA2014}{79}
\bibcite{Dierckx:1993:CSF:151103}{80}
\bibcite{boisvert1997matrix}{81}
\bibcite{rew1990netcdf}{82}
\bibcite{harwellboeing}{83}
\bibcite{ODRPACK_Boggs}{84}
\bibcite{linguistref}{85}
\bibcite{Koelbel:1993:HPF:562354}{86}
\bibcite{SWARZTRAUBER198445}{87}
\bibcite{SWARZTRAUBER198251}{88}
\bibcite{leh:sor:yan96}{89}
\bibcite{Amos:1986:APP:7921.214331}{90}
\bibcite{CDFLIB_site}{91}
\bibcite{Kernighan:1988:CPL:576122}{92}
\bibcite{doi:10.1080/10556788.2018.1449842}{93}
\bibcite{li05}{94}
\bibcite{superlu_ug99}{95}
\bibcite{Barber:1996:QAC:235815.235821}{96}
\bibcite{cephes_netlib}{97}
\bibcite{Lam:2015:NLP:2833157.2833162}{98}
\bibcite{Bolz:2009:TMP:1565824.1565827}{99}
\bibcite{knn-jake}{100}
\bibcite{kdtree-search-algo}{101}
\bibcite{gh-4374}{102}
\bibcite{10.1007/978-3-540-75755-9_107}{103}
\bibcite{Cormen:2001:IA:580470}{104}
\bibcite{Moore2000ar}{105}
\bibcite{ckdtree-weights}{106}
\bibcite{0004-637X-750-1-38}{107}
\bibcite{LAPACK}{108}
\bibcite{blas-lapack-wrappers-scipy-2015}{109}
\bibcite{andersen2000mosek}{110}
\bibcite{netlib}{111}
\bibcite{andersen1995presolving}{112}
\bibcite{Wormington1999}{113}
\bibcite{Storn1997}{114}
\bibcite{nelder_simplex_1965}{115}
\bibcite{wright_direct_1996}{116}
\bibcite{powell_efficient_1964}{117}
\bibcite{powell_direct_1994}{118}
\bibcite{powell_direct_1998}{119}
\bibcite{powell_view_2007}{120}
\bibcite{polak_note_1969}{121}
\bibcite{nocedal_numerical_2006}{122}
\bibcite{byrd_limited_1995}{123}
\bibcite{zhu_algorithm_1997}{124}
\bibcite{schittkowski_nonlinear_1982}{125}
\bibcite{schittkowski_nonlinear_1982-1}{126}
\bibcite{schittkowski_convergence_1983}{127}
\bibcite{kraft_software_1988}{128}
\bibcite{nash_newton-type_1984}{129}
\bibcite{powell_new_1970}{130}
\bibcite{steihaug_conjugate_1983}{131}
\bibcite{conn_trust_2000}{132}
\bibcite{more_computing_1983}{133}
\bibcite{gould_solving_1999}{134}
\bibcite{Griffiths5228}{135}
\bibcite{FITPACK}{136}
\bibcite{scipy-gh2885}{137}
\bibcite{scipy-gh3174}{138}
\bibcite{deBoor1978}{139}
\bibcite{scipy-gh5653}{140}
\bibcite{FritschCarlson1980}{141}
\bibcite{Akima1970}{142}
\bibcite{TDD-Beck}{143}
\bibcite{silver2017collaborative}{144}
\bibcite{pytest}{145}
\bibcite{pytest-cov}{146}
\bibcite{gcov}{147}
\bibcite{scipy-cov}{148}
\bibcite{asvref}{149}
\bibcite{SciPyProjectGovernance}{150}
\bibcite{scipy-dev-guide}{151}
\bibcite{eghbal2016}{152}
\bibcite{SciPyValue}{153}
\bibcite{astropy-2018}{154}
\bibcite{pypinfo}{155}
\bibcite{condainfo}{156}
\bibcite{SciPylib}{157}
\bibcite{googlescholar}{158}
\bibcite{PhysRevLett.116.061102}{159}
\bibcite{intel-python}{160}
\bibcite{octoverse-scipy}{161}
\bibcite{SciPy_roadmap_1}{162}
\bibcite{SciPy_roadmap_dev}{163}
\bibcite{abbasi2018sparse}{164}
\newlabel{LastPage}{{}{24}{}{page.24}{}}
\xdef\lastpage@lastpage{24}
\xdef\lastpage@lastpageHy{24}
\ttl@finishall
